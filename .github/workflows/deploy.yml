name: Deploy to Amazon ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Setup docker cache
      id: cache
      uses: actions/cache@v1
      with:
        path: docker-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Load docker cache
      run: |
        if [ -d "docker-cache" ]; then
          cat docker-cache/x* > bops.tar
          docker load < bops.tar
          rm -rf docker-cache
        fi

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: bops/preview
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t bops:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker save bops:$IMAGE_TAG $(docker history -q bops:$IMAGE_TAG | awk '!/<missing>/{print}') >bops.tar
        mkdir docker-cache
        split -b 5G bops.tar docker-cache/x
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Generate task definition for db_migrate
      id: task-def-db_migrate
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definitions/db_migrate.json
        container-name: bops
        image: ${{ steps.build-image.outputs.image }}

    - name: Generate task definition for web
      id: task-def-web
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definitions/web.json
        container-name: bops
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy db_migrate
      env:
        CLUSTER: bops-preview
        TASK_DEFINITION: bops-db-migrate-preview
        BOPS_SUBNETS: subnet-${{ secrets.BOPS_SUBNETS }}
        BOPS_SG: sg-${{ secrets.BOPS_SG }}
      run: |
        aws ecs run-task --cluster $CLUSTER \
          --task-definition $TASK_DEFINITION --launch-type FARGATE \
          --network-configuration '{"awsvpcConfiguration": {"subnets": ["'$BOPS_SUBNETS'"],"securityGroups": ["'$BOPS_SG'"],"assignPublicIp": "ENABLED"}}'

    - name: Deploy web
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-web.outputs.task-definition }}
        service: bops-web-preview
        cluster: bops-preview
