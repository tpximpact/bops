---
name: deploy-environment

on:
  workflow_call:
    inputs:
      environment-name:
        type: string
        required: true

concurrency:
  group: ${{ inputs.environment-name }}

jobs:
  build-image:
    name: Create and push docker image to ECR for ${{ inputs.environment-name }}
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup docker cache
        id: cache
        uses: actions/cache@v3
        with:
          path: docker-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Load docker cache
        run: |
          if [ -d "docker-cache" ]; then
            cat docker-cache/x* > bops.tar
            docker load < bops.tar
            rm -rf docker-cache
          fi

      - name: Build, tag, and push ${{ inputs.environment-name }} image to Amazon ECR based github sha
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          DOCKER_BUILDKIT=1 docker build --build-arg RAILS_MASTER_KEY=$RAILS_MASTER_KEY -t bops:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker save bops:$IMAGE_TAG $(docker history -q bops:$IMAGE_TAG | awk '!/<missing>/{print}') >bops.tar
          mkdir docker-cache
          split -b 5G bops.tar docker-cache/x

  deploy-db-migrate-service:
    name: Perform database migrations on ${{ inputs.environment-name }}
    runs-on: ubuntu-20.04
    needs: [build-image]
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image URI
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
        run: |
          echo "uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Download task definition for db_migrate, strip unused properties and update image to latest image_arn
        env:
          IMAGE_ARN: ${{ steps.ecr-image.outputs.uri }}
        run: |
          aws ecs describe-task-definition --task-definition bops-db-migrate-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' | \
          jq -r '.containerDefinitions[].image = "'$IMAGE_ARN'"' > db_migrate.json

      - name: Register db_migrate on a new revision
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://db_migrate.json

      - name: Run db_migrate
        env:
          CLUSTER: bops-${{ inputs.environment-name }}
          TASK_DEFINITION: bops-db-migrate-${{ inputs.environment-name }}
          BOPS_SUBNETS: subnet-${{ secrets.BOPS_SUBNETS }}
          BOPS_SG: sg-${{ secrets.BOPS_SG }}
        run: |
          aws ecs run-task --cluster $CLUSTER \
            --task-definition $TASK_DEFINITION --launch-type FARGATE \
            --network-configuration '{"awsvpcConfiguration": {"subnets": ["'$BOPS_SUBNETS'"],"securityGroups": ["'$BOPS_SG'"],"assignPublicIp": "ENABLED"}}'

  deploy-services:
    name: Deploy services to ${{ inputs.environment-name }}
    runs-on: ubuntu-20.04
    needs: [build-image, deploy-db-migrate-service]
    environment: ${{ inputs.environment-name }}
    strategy:
      matrix:
        service_type: [ 'console', 'worker' ]

    steps:
      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image URI
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
        run: |
          echo "uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Download task definition for ${{ matrix.service_type }} and strip unused properties
        run: |
          aws ecs describe-task-definition --task-definition bops-${{ matrix.service_type }}-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > ${{ matrix.service_type }}.json

      - name: Generate task definition for console
        if: matrix.service_type == 'console'
        id: task-def-console
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: console.json
          container-name: bops
          image: ${{ steps.ecr-image.outputs.uri }}

      - name: Generate task definition for worker
        if: matrix.service_type == 'worker'
        id: task-def-worker
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: worker.json
          container-name: bops
          image: ${{ steps.ecr-image.outputs.uri }}

      - name: Deploy ${{ matrix.service_type }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps[format('task-def-{0}', matrix.service_type)].outputs.task-definition }}
          service: bops-${{ matrix.service_type }}-${{ inputs.environment-name }}
          cluster: bops-${{ inputs.environment-name }}
          wait-for-service-stability: true

  deploy-web-service:
    name: Deploy web service to ${{ inputs.environment-name }}
    runs-on: ubuntu-20.04
    needs: [build-image, deploy-db-migrate-service, deploy-services]
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get image URI
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
        run: |
          echo "uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Download task definition for web and strip unused properties
        run: |
          aws ecs describe-task-definition --task-definition bops-web-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > web.json

      - name: Generate task definition for web
        id: task-def-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: web.json
          container-name: bops
          image: ${{ steps.ecr-image.outputs.uri }}

      - name: Deploy web
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-web.outputs.task-definition }}
          service: bops-web-${{ inputs.environment-name }}
          cluster: bops-${{ inputs.environment-name }}
          wait-for-service-stability: true
          codedeploy-appspec: .aws/appspec.yml
          codedeploy-application: bops-${{ inputs.environment-name }}
          codedeploy-deployment-group: default
